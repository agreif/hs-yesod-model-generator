{% include 'macros.gtmpl' -%}

postAdd{{model.nameCap}}R :: {{ model.parentHsType ? model.parentHsType ~ 'Id -> ' : '' -}} {% for arg in model.AddHandlerArgs %} {{arg.type}} -> {% endfor %} Handler Value
postAdd{{model.nameCap}}R {{ model.parentHsParamId ? model.parentHsParamId ~ ' ' : '' -}} {% for arg in model.addHandlerArgs %} {{arg.name}} {% endfor %} = do
  ((result, formWidget), _) <- runFormPost $ vAdd{{model.nameCap}}Form Nothing{% for arg in model.addFormArgs %} Nothing{% endfor %}
  case result of
    FormSuccess vAdd{{model.nameCap}} -> do
      curTime <- liftIO getCurrentTime
      {% if model.addPostNeedsCurRoute %}
      maybeCurRoute <- getCurrentRoute
      {% endif %}
      Entity _ authUser <- requireAuth
      urlRenderer <- getUrlRender
      let {{model.name}} = {{model.nameCap}}
            {
          {%- for line in model.hsAddAssignmentLines %}
            {{prefixCommaUnlessLoopFirst()}}{{line}}
          {%- endfor %}
            {{ model.hsAddAssignmentLines || field.addView ? ', ' : ''}}
            {{- model.name}}Version = 1
            , {{model.name}}CreatedAt = curTime
            , {{model.name}}CreatedBy = userIdent authUser
            , {{model.name}}UpdatedAt = curTime
            , {{model.name}}UpdatedBy = userIdent authUser
            }
      runDB $ do
        {%- if model.addPostExtraStoreFunc %}
        {{model.name}}Id <- insert {{model.name}}
        {{model.addPostExtraStoreFunc}}
        {% else %}
        _ <- insert {{model.name}}
        {% endif -%}
        return ()
      returnJson $ VFormSubmitSuccess { fsSuccessDataJsonUrl = urlRenderer $ {{model.addFormDataJsonUrl}} }
    _ -> do
      resultHtml <- formLayout [whamlet|^{formWidget}|]
      returnJson $ VFormSubmitInvalid
        { fsInvalidModalWidgetHtml = toStrict $ Blaze.renderHtml resultHtml }

{{- '' -}}
