{% include 'macros.gtmpl' -%}

postEdit{{model.nameCap}}R :: {{model.nameCap}}Id -> Handler Value
postEdit{{model.nameCap}}R {{model.name}}Id = do
  ((result, formWidget), _) <- runFormPost $ vEdit{{model.nameCap}}Form Nothing
  case result of
    FormSuccess vEdit{{model.nameCap}} -> do
      curTime <- liftIO getCurrentTime
      Entity _ authUser <- requireAuth
      urlRenderer <- getUrlRender
      {% if model.editPostLoadsModel -%}
      {{ model.name }} <- runDB $ get404 {{model.name}}Id
      {% endif -%}
      let persistFields = [
        {%- for field in model.dbUpdatableFields %}
            {{prefixCommaUnlessLoopFirst()}}{{model.nameCap}}{{field.nameCap}} =. vEdit{{model.nameCap}}{{field.nameCap}} vEdit{{model.nameCap}}
        {%- endfor %}
            {{ model.dbUpdatableFields ? ', ' : ''}}
            {{- model.nameCap}}Version =. vEdit{{model.nameCap}}Version vEdit{{model.nameCap}} + 1
            , {{model.nameCap}}UpdatedAt =. curTime
            , {{model.nameCap}}UpdatedBy =. userIdent authUser
            ]
      updateCount <- runDB $ updateWhereCount [ {{model.nameCap}}Id ==. {{model.name}}Id
                                              , {{model.nameCap}}Version ==. vEdit{{model.nameCap}}Version vEdit{{model.nameCap}}
                                              ] persistFields
      if updateCount == 1
        then returnJson $ VFormSubmitSuccess { fsSuccessDataJsonUrl = urlRenderer $ {{model.editFormDataJsonUrl}} }
        else returnJson $ VFormSubmitStale { fsStaleDataJsonUrl = urlRenderer $ {{model.editFormDataJsonUrl}} }
    _ -> do
      resultHtml <- formLayout [whamlet|^{formWidget}|]
      returnJson $ VFormSubmitInvalid
        { fsInvalidModalWidgetHtml = toStrict $ Blaze.renderHtml resultHtml }
